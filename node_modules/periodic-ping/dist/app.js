'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ping = undefined;

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var msgs = ['Passing in the same time value for both sleep and wake is not allowed.', 'Time values must be numbers greater than 0 and less than or equal 12.', 'You must at least pass in an appName value to the first function parameters array.', 'Periodic Ping task began as expected and first request delivered. Http request interval loop commencing for scheduled app pings as defined...'];

var err = function err(ind) {
  throw new Error(msgs[ind]);
};

var sendRequest = function sendRequest(name) {
  return _http2.default.get('http://' + name + '.herokuapp.com/periodicping').on('error', function (err) {}).end();
};

var modifyAndFormatTimeInput = function modifyAndFormatTimeInput(time, amBool) {
  return (0, _moment2.default)().startOf('day').add(time + (amBool ? time === 12 ? 12 : 0 : time === 12 ? 0 : 12), 'hours').format();
};

var pingLogic = function pingLogic(_ref) {
  var wake = _ref.wake,
      sleep = _ref.sleep,
      appName = _ref.appName;

  var curTime = (0, _moment2.default)(Date.now()).format();
  if ((0, _moment2.default)(curTime).isBetween(wake, sleep) || (0, _moment2.default)(wake).isAfter(sleep) && (0, _moment2.default)(curTime).isAfter(wake)) {
    sendRequest(appName);
  }
};

/**
 * Dispatches http requests within a setInterval timeout, configured via various arguments passed in.
 * [Makes no adjustment to account for time-zones or other conversions, beyond basic AM/PM calculation.
 * Assumes the user will manage their own operating system / ensure
 * their runtime environment has the appropriate time-zone set for the intended use.]
 * @param appName
 * @param wakeTime
 * @param sleepTime
 * @param wakeAm
 * @param sleepAm
 * @param frequency
 * @return {number}
 */
var ping = exports.ping = function ping(_ref2) {
  var _ref2$appName = _ref2.appName,
      appName = _ref2$appName === undefined ? null : _ref2$appName,
      _ref2$frequency = _ref2.frequency,
      frequency = _ref2$frequency === undefined ? 300000 : _ref2$frequency,
      _ref2$wakeTime = _ref2.wakeTime,
      wakeTime = _ref2$wakeTime === undefined ? null : _ref2$wakeTime,
      _ref2$wakeAm = _ref2.wakeAm,
      wakeAm = _ref2$wakeAm === undefined ? null : _ref2$wakeAm,
      _ref2$sleepTime = _ref2.sleepTime,
      sleepTime = _ref2$sleepTime === undefined ? null : _ref2$sleepTime,
      _ref2$sleepAm = _ref2.sleepAm,
      sleepAm = _ref2$sleepAm === undefined ? null : _ref2$sleepAm;

  if (appName != null && typeof appName === 'string') {
    if (wakeTime != null && sleepTime != null && wakeAm != null && sleepAm != null) {
      if (wakeTime > 0 && wakeTime <= 12 && sleepTime > 0 && sleepTime <= 12) {
        var wake = modifyAndFormatTimeInput(wakeTime, wakeAm);
        var sleep = modifyAndFormatTimeInput(sleepTime, sleepAm);
        if (!(0, _moment2.default)(wake).isSame(sleep)) {
          // All checks complete, perform the case for when a wake schedule is properly defined
          pingLogic({ wake: wake, sleep: sleep, appName: appName });
          console.log(msgs[3]);
          return setInterval(function () {
            return pingLogic({ wake: wake, sleep: sleep, appName: appName });
          }, frequency);
        }
        err(0);
      }
      err(1);
    }
    // Perform the case for when no start / wake time is specified
    console.log(msgs[3]);
    return setInterval(function () {
      return sendRequest(appName);
    }, frequency);
  }
  err(2);
};

/**
 * Created by joec on 3/27/2017.
 */